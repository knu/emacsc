#!/usr/bin/perl
#
# magit(1) - a frontend command for magit
#
# Copyright (c) 2013 Akinori MUSHA
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# See https://github.com/knu/emacsc for the latest information.

use strict;
use warnings;
use Cwd qw(abs_path getcwd);
use File::Basename;
use Getopt::Long;

main();

sub usage {
    my $name = basename($0);

    print STDERR <<"EOF";
usage: $name [--log] [directory]

    -h, --help      show this help
    -l, --log       show `magit-log-all-branches` instead of status

Run magit-status on a given directory.  If omitted, ask where with the
current directory as default. If `--log` is specified, show the log instead.

This command depends on emacsc(1).  Put the following lines in your
Emacs initialization file.

    (require 'emacsc)
EOF
}

sub main {
    my $opt_h;
    my $opt_l;
    my $magit_command;
    
    GetOptions("h|help" => sub { usage; exit },
               "l|log" => \$opt_l) or exit 64;

    if (1 < @ARGV) {
        usage;
        exit 64;
    }

    if ($opt_l) {
        $magit_command = "magit-log-all-branches";
    } else {
        $magit_command = "magit-status"
    }
    
    eval {
        if (@ARGV) {
            my $dir = check_dir($ARGV[0]);
            exec qw(emacsc -x),
                sprintf(q{(magit-status "%s")},
                        elisp_escape($dir));
        } else {
            my $dir = getcwd();
            exec qw(emacsc -x),
                sprintf(q{(let ((current-prefix-arg '(4)) (default-directory "%s")) (call-interactively '%s))},
                        elisp_escape($dir), elisp_escape($magit_command));
        }
    };
    if ($@) {
        print STDERR basename($0), ": ", $@;
        exit 1;
    }
}

sub check_dir {
    my($dir) = @_;

    -d $dir and return abs_path($dir);

    die sprintf("%s: %s\n", $dir, $! || 'Not a directory');
}

sub elisp_escape {
    (local $_) = @_;
    s/[\\"]/\\$1/;
    $_;
}
